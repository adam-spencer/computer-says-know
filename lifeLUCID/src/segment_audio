#!/usr/bin/env python
"""
segment_audio

Generate audio segments using a JSON input.

Copyright Adam Spencer, 2023.
"""

__author__ = 'Adam Spencer'

import soundfile as sf
import numpy as np
import json
import argparse
from pathlib import Path

def generate_segments(filename:Path, json_file:Path, channel:int, out_dir:Path,
                      v:bool) -> list[np.ndarray]:
  """
  Generate audio segments given an audio file and segment metadata.

  :param filename: Path to input file.
  :param json_file: Path to JSON segment metadata.
  :param channel: Which audio channel is being segmented.
  :param v: Verbose output.
  :returns: List containing segmented audio represented by Numpy arrays.
  """
  audio_list = []
  vprint(v, 'Loading metadata...')
  with open(json_file) as f:
    seg_data = json.load(f)

  vprint(v, 'Loading audio...')
  sig, fs = sf.read(filename)
  sig = sig[:, channel]

  vprint(v, 'Beginning segmentation...')
  for seg_n, seg_meta in seg_data.items():
    slice_start = int(fs * seg_meta['start'])
    slice_end = int(fs * seg_meta['end'])
    outpath = out_dir / f'{seg_n}.wav'
    sf.write(outpath, sig[slice_start:slice_end], fs)
  vprint(v, 'Done!')

def vprint(verbose:bool, msg:str) -> None:
  """
  Verbose mode printing.
  
  :param verbose: Verbose mode bool.
  :param msg: Message to print.
  """
  if verbose:
    print(msg)

def main() -> None:
  parser = argparse.ArgumentParser()
  parser.add_argument('in_file', help='Input audio file')
  parser.add_argument('json_file',
                      help='Input JSON file containing segment definitions')
  parser.add_argument('out_dir', help='Output directory')
  parser.add_argument('--channel', '-c', choices=[0,1],
                      help='Specify channel, 0 = L, 1 = R',
                      default=0)
  parser.add_argument('--verbose', '-v', action='store_true',
                      help='Activate verbose output')
  args = parser.parse_args()

  in_file = Path(args.in_file)
  json_file = Path(args.json_file)
  out_dir = Path(args.out_dir)
  if in_file.is_dir() or json_file.is_dir() or not out_dir.is_dir():
    raise ValueError(f"Incorrect input spec!")

  generate_segments(in_file, json_file, args.channel, out_dir, args.verbose)

if __name__ == '__main__':
  main()
